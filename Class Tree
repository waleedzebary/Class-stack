class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
        self.parent = None
        self.level = 0


class Tree:
    def __init__(self):
        self.root = None

    def is_empty(self):
        if self.root is None:
            return True
        else:
            return False

    def insert(self, value):
        if self.root is None:
            self.root = Node(value)
        else:
            self.insert_helper(value, self.root)

    def insert_helper(self, data, current_node):
        new_node = Node(data)
        if current_node.value > data:
            if current_node.left is None:
                current_node.left = new_node
            else:
                self.insert_helper(data, current_node.left)
        else:
            if current_node.right is None:
                current_node.right = new_node
            else:
                self.insert_helper(data, current_node.right)

    def find(self, value):
        if self.root:
            self.find_helper(value, self.root)
        else:
            return False

    def find_helper(self, key, current_node):
        if current_node.value == key:
            return True
        elif current_node.value > key:
            if current_node.left:
                return self.find_helper(key, current_node.left)
            else:
                return False
        elif current_node.value < key:
            if current_node.right is not None:
                return self.find_helper(key, current_node.right)
            else:
                return False
        else:
            return False

    def preorder(self):
        print('Preorder:')
        if self.root is None:
            print('The Tree is empty')
        else:
            self.preorder_helper(self.root)

    def preorder_helper(self, current_node):
        if current_node:
            print(str(current_node.value), end=' - ')
            if current_node.left:
                self.preorder_helper(current_node.left)
            if current_node.right:
                self.preorder_helper(current_node.right)

    def even_odd(self):
        print('Preorder:')
        if self.root is None:
            print('The Tree is empty')
        else:
            self.check_even_or_odd(self.root)

    def check_even_or_odd(self, current_node):
        if current_node:
            print(str(current_node.value), end=' - ')
            if current_node.left is None and current_node.right is None:
                if current_node.value % 2 == 0:
                    current_node.value = 'E'

                else:
                    current_node.value = 'O'
            if current_node.left:
                self.check_even_or_odd(current_node.left)
            if current_node.right:
                self.check_even_or_odd(current_node.right)

    def postorder(self):
        print('')
        print('Postorder:')
        if self.root is None:
            print('The Tree is empty')
        else:
            self.postorder_helper(self.root)

    def postorder_helper(self, current_node):
        if current_node:
            if current_node.left:
                self.postorder_helper(current_node.left)
            if current_node.right:
                self.postorder_helper(current_node.right)
            print(str(current_node.value), end=' - ')

    def inorder(self):
        print('')
        print('Inorder:')
        if self.root is None:
            print('The Tree is empty')
        else:
            self.inorder_helper(self.root)

    def inorder_helper(self, current_node):
        if current_node:
            if current_node.left:
                self.postorder_helper(current_node.left)
            print(str(current_node.value), end=' - ')
            if current_node.right:
                self.postorder_helper(current_node.right)

    def remove(self, key):
        node = self.root
        # find node to remove
        while node and node.value != key:
            parent = node
            if key < node.value:
                node = node.left
            elif key > node.value:
                node = node.right
        # case 1: value not found
        if node is None or node.value != key:
            print('The value is not found..!')
            return False
        # case 2: remove node has no children
        elif node.left is None and node.right is None:
            if key < parent.value:
                parent.left = None
            else:
                parent.right = None
        # case 3: remove node has left child only
        elif node.left and node.right is None:
            if key < parent.value:
                parent.left = node.left
            else:
                parent.right = node.left
        # case 4: remove node has right child only
        elif node.left is None and node.right:
            if key > parent.value:
                parent.right = node.right
            else:
                parent.left = node.left
        # case 5: remove has left and right children
        else:
            del_node_parent = node
            del_node = node.right
            new_root = self.root
            while del_node.left:
                del_node_parent = del_node
                del_node = del_node.left
            node.value = del_node.value
            if del_node.right:
                if del_node_parent.value > del_node.value:
                    del_node_parent.right = del_node.left
                else:
                    del_node_parent.right = del_node.right
            else:
                if del_node.value < del_node_parent.value:
                    del_node_parent.left = None
                else:
                    del_node_parent.right = None

    def diameter_of_binary_tree(self):
        res = [0]

        def dfs(root):
            if not root:
                return -1
            left = dfs(root.left)
            right = dfs(root.left)
            res[0] = max(res[0], 2 + left + right)
            return 1 + max(left, right)
        dfs(self.root)
        return res[0]

    def height(self):
        if self.root is not None:
            return self._height(self.root, 0)
        else:
            return 0

    def _height(self, cur_node, cur_height):
        if cur_node is None:
            return cur_height
        left_height = self._height(cur_node.left, cur_height + 1)
        right_height = self._height(cur_node.right, cur_height + 1)
        return max(left_height, right_height)

    def depth(self):
        if self.root is None:
            print('The tree is empty')
        else:
            return self.depth_helper(self.root)

    def depth_helper(self, current):
        # Null node has 0 depth.
        if current is None:
            return 0
        leftDepth = self.depth_helper(current.left)
        rightDepth = self.depth_helper(current.right)
        if leftDepth > rightDepth:
            return leftDepth + 1
        else:
            return rightDepth + 1


tree = Tree()
# size = int(input('Enter size of Tree: '))
# for i in range(size):
#     item = int(input('Enter a number: '))
#     tree.insert(item)
# tree.insert(5)
# tree.insert(2)
# tree.insert(6)
# tree.insert(1)
# tree.insert(3)
# tree.insert(7)
# tree.insert(4)
# tree.insert(10)
# remove = int(input('which number do you want to remove: '))
# tree.preorder()
# tree.remove(remove)
# print('')
# print("the height of the tree is: ", tree.height() - 1)
# print("the depth of the tree is: ", tree.depth() - 1)

# tree.even_odd()
# tree.preorder()
